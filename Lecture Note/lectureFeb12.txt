Higher order functions
    Function that return other functions
        partial
        application
        anonymous function
        currying
    Functions that take other functions as arguments
        map
        filter
        fold (reduce)

let f a b = a + b ;; ex: f 1 2 -> 3
int -> int -> int
Ocaml "thinks" that all functions take 1 argument and return 1 result
f 1 => A function that is waiting for the value of b. has type int -> int

let g = f 1;;
g 2 => 3      Partial application, Curried function

Works both ways
    let f a =
        let g b = a + b
        in g
    ;;
    int -> (int -> int)
    1 2 => 3

Anonymous Functions
    (fun P1 P2 ...Pn -> e) n >= 1
    (fun a b -> a + b)
    let f a = (fun b -> a + b);; same as code above.

    map f [e0; e1 ...; en-1] =>
    [f e0; f e1 ...; fen-1]
    map
    (fun x -> x + 1)
    [1; 2; 3]         => [2, 3, 4]

    let map func objects =
        let rec mapping objects = 
            Match objects
            with [] -> [] |
                first :: rest -> 
                    (func first) :: (mapping rest)
        in mappiing objects
    ;;
    ('a -> 'b) -> 'a list -> 'b list
       func        objects    result
    
    Is this tail recursive?
        No, because of cons

    let add1 x = x + 1;;
    map add1 [1; 2; 3] =>
        mapping [1; 2; 3] =>
        add1 1 :: mapping[2; 3]
        add1 1 :: add1 2 :: mapping[3] =>
        add1 1 :: add1 2 :: add1 3 :: mapping[] => [2; 3; 4]
    
    filter P [e0; e1...; en-1] =>
        [e0; e1...; em]
        where e is an e for which p returns true
        filter
            (fun n -> n mod 2 = 1)
            [0; 1; 2; 3; 4; 5] => [1; 3; 5]
    
    let filter predicate objects =
        let rec filtering objects =
            Match objects
            with [] -> [] |
                first :: rest ->
                    if predicate first
                    then first ::(filtering rest)
                    else filtering rest
        in filtering objects
    ;;
    ('a -> bool) -> 'a list -> 'a list
     Predicate       objects    result
     Maybe tail recursive