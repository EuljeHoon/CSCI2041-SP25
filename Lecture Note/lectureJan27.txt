1/27/2025
Example Ocaml Functions
    member
    append
    helper Functions
        external
        internal

let square x =
    x * x;;
square 2 => 4

member e[e0; e1 ...; en-1]
{true if e is in the list, false otherwise}

Recursion: 2 kinds of cases base case >= 1
                            Recursive case >= 1
if p then t else e: p has the type bool, and t and e can have any type 
{t if p is true, e if p is false}

let rec member e l =      {rec: define something in terms of itself}
    if l = []                 
        then false                {base case}
    else if hd l = e
        then true
        else member e(tl l);; {recursive case}
Its type: 'a -> 'a list -> bool
            {args}       {result}
member 1 [3; 1; 2]
       e     l

let n = e1 in e2 {Execute e2 with n having value of e1 return the result}
let k = 1 in 5 + k => 6   

let member e l =
    let rec membering 2 =
        if l = []
            then false
        else if hd l = e
            then true
        else membering(tl l)
    in membering l;;
{might do this if some ag's never change. Internal helper}

tl[3; 1; 7] => [1; 7] {tail: everything but the first}

there is no return statement.
free formatting language