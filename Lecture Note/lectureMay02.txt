Macros in OCaml
    repeatedly executing the same code
    inadvertent name capture
    Proposed extension to OCaml for Macros
    Data type for code
    Fast exponentation

Not in OCaml
let macro abs x =
    let x' = x
    in if x' < 0
            then - x'
        else x';;
    abs(bcse y) replaced by
        let x' = (bcse y)
        in if x' < 0
                then _x'
            else x'

let macro add n =
    let M = 1
    in n + m ;;
add y replaced by
    let m = 1
    in y + M
let m = 2 
in add m
replaced by 
let m = 2
in let m = 1
    in m + m <- returns 2

The m inside the macro is confused with the m passed as an argument! Inadvertent name capture
let behaves differenty inside macros cheates new unique names.

Proposal to include macros in OCaml
Yallop & White 2017 "Modular Macros" Executable code inside the comiler that makes more code automatically.
Fast exponentation

Data structure representing code. <<x>> $y means substitute y  inside <<x>>.
Suppose a is u, b is v then << $a + $b >> => << u + v >>

b ^ e = b^e when b int != 0, e int >= 0 consonant
a ^ 7 = a * a * a * a * a * a * a

b ^ e = {1 if e = 0 (0)
         b if e = 1 (1)
         Square b if e = 2 (2)
         Square (b ^ (e/2)) ^ 2 if e even (3)
         (b * (b ^ (e - 1)) if e odd (4))}

a ^ 7 =>4 a * (a ^ 6) =>3 a * square(a ^ 3) =>4 a * square(a * (a ^ 2)) =>2 a x square(a x(square a))

Can we do this automatically?: Code generation by macros inside the compiler

macro rec power b e =
    match e
    with 0 -> << 1 >> |
         1 -> << $b >> |
         2 -> << square $b >> |
         e when(e mod 2 = 0) -> << square $(power b (e/2)) >> |
         e -> << b * $(power b (e - 1)) >> ;;
    power a 7 => << a * square (a * square a) >>
    power a 7 + 3 => 

let square a = a * a ;;
macro square a =
    <<let ?1 = $a
        in ?1 * ?1 >>;; Must be smart enough to use a new unique name instead of t. Avoid name capture.
