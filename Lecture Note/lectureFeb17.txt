Announcements
    Lab4
    Project1
Continuation passing
    what it is
    when to use it
    Examples
        for loop
        generate books

Continuation Passing
    f(g x) functions usually return values
    g returns exactly one value
        function provides a value to its caller , by calling another function - continuation
        g x(fun y -> f y) g's continuation
        let g x etc =
            etc y
        We usually don't care what g returns-g provides its value by calling etc.
        why?: Generalizes the idea of returning values.
                Provides 0 values never calls etc.
                Provides 1 value calls etc once.
                Provides n >= 0 values calls etc n times.
                We may not know n.

        What if n is large?
        What if we don't need all the values?
        for i = e0 to e1
            statements
        
        let forloop etc first last =
            let rec looping current =
                if current <= last
                    then (etc current;
                            looping  (current + 1))
                else ()
            in looping first
        ;;
        e1; e2 ...; en
        Execute e1, e2 ..., en in left to right order return value of en.
        forloop(fun i -> print i) 1 3
        looping 1   print 1
        looping 2   print 2
        looping 3   print 3
        looping 4   => ()
    All possible lists of bool's
        [false; false; false]
        [false; false; true]
        [false; true; false]
        .
        .
        .
        [true; true; true]
        3 x 8 = 2^3
    Tautology checker - Brute force

    let generateBools etc n =                    n >= 0
        let rec generating bools n =
            match n
            with 0 -> etc bools |
                _ -> 
                    generating(false :: bools)(n - 1)
                    generating(true :: bools)(n - 1)
        in generating[] n
    ;;
    generateBools:(bool list -> 'a) -> int ->'a
    