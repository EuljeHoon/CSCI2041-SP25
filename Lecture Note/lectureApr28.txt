Tautology Checker
    How to convert
    rules into code?
    iffyTaut.ml(later)
    proposition
    makeIf
    normalize
    substitude
    simplify
    isTautology

1(!) ~ alpha => (if alpha F T)
2(&&) alpha ^ beta => (if alpha beta F)
3(||) alpha V beta => (if alpha T beta)                1 ~ 5: Can we make ocaml do al the work?(Redefine in a module)
4(>) alpha -> beta => (if alpha beta T)
5(=) alpha <-> beta => (if alpha beta (if alpha F T))
6 (if(if pi1 alpha1 beta1) alpha2 beta2) => (if pi1 (if alpha1 alpha2 beta2)(if beta1 alpha2 beta2))
7 (if T alpha beta) => alpha
8 (if F alpha beta) => beta              7 ~ 9: Code done early
9 (if pi T F) => pi
10 (if pi alpha alpha) => alpha     for 10, potential difficulties
11 (if pi alpha beta) => (if pi alpha{pi => T} beta {pi => F})

Type proposition =
    If of proposition * proposition * proposition |
    F |
    T |
    V of string ;;
    (~alpha V alpha) =>3 (if ~alpha T alpha) =>1 (if(if alpha F T) ^ alpha) =>6
    (if alpha(if F T alpha)(if T T alpha)) =>8 (if alpha alpha (if T T alpha)) =>7
    (if alpha alpha T) =>11 (if alpha alpha{alpha => T} T {alpha => F}) =>11 (if alpha T T) =>10 T!!!!

module Test =
struct
    let (!) alpha = makeIf alpha F T;;
    let (&&) alpha beta = makeIf alpha beta F;;
    let (||) alpha beta = makeIf alpha T beta;;
    let (>) alpha beta = makeIf alpha beta T;;
    let (=) alpha beta = makeIf alpha beta (makeIf alpha F T);;  <- frees me from using ocaml's ugly constructor notation
    let a = V "a";;
    let b = V "b";;
        .
        .
        .
    (* a ^ b -> ~(~a V ~b)*)
    isTautology((a && b) > !(!a || !b))
end;;

let makeIf pi alpha beta =
    match (pi, alpha, beta)
    with (pi, T, F) ->  rule 9
            pi |
         (T, alpha, _) ->  rule 7
            alpha |
         (F, _, beta) ->  rule 8
            beta |
         (_, _, _) ->
            If (pi, alpha, beta);;

let rec normalize phi =
    let rec normalzing pi0 alpha0 beta0 ->
        match pi0
        with If(pi1, alpha1, beta1) ->  rule 6
                normalizing pi1
                    (makeIf alpha1 alpha0 beta0)
                    (makeIf beta1 alpha0 beta0) |
             _ ->
                makeIf pi0
                    (normalize alpha0)
                    (normalize beta0)
    in match phi
       with If(pi, alpha, beta) ->
                normalizing pi alpha beta |
            _ ->
                phi;;